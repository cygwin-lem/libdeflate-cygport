################################
NAME=libdeflate
VERSION=1.7
RELEASE=1

################################
CATEGORY="Archive"
SUMMARY="A library for fast, whole-buffer DEFLATE-based compression and decompression"
DESCRIPTION="\
libdeflate is a library for fast, whole-buffer DEFLATE-based
compression and decompression.
The supported formats are:
    DEFLATE (raw),
    zlib (a.k.a. DEFLATE with a zlib wrapper),
    gzip (a.k.a. DEFLATE with a gzip wrapper).
libdeflate is heavily optimized. It is significantly faster than
the zlib library, both for compression and decompression, and
especially on x86 processors. In addition, libdeflate provides
optional high compression modes that provide a better compression
ratio than the zlib's 'level 9'."
HOMEPAGE="https://github.com/ebiggers/libdeflate"

################################
## Source from a git repository
################################
GIT_REPO="https://github.com/ebiggers/libdeflate"
declare -A GIT_DATEHASH_BY_NAME=(
  # git log --date=iso-strict --format='%cd/%H' -1
  [1.7]=2020-11-09T19:29:50-08:00/v1.7
  [1.6]=2020-05-12T19:42:04-07:00/v1.6
)
REV_HASH="${GIT_DATEHASH_BY_NAME[${VERSION}]#*/}"
REV_DATE="${GIT_DATEHASH_BY_NAME[${VERSION}]%/*}"
REV_DATE_SHORT="${REV_DATE%%T*}"
GIT_BASENAME="${GIT_REPO##*/}"
SRC_URI="${GIT_REPO}/archive/${REV_HASH}/${GIT_BASENAME}-${VERSION}.tar.gz"
SRC_DIR="${GIT_BASENAME}-${REV_HASH#v}"

################################
## ABI for libdeflate
ABI=0
################################

################################
## Requirements for building
################################
BUILD_REQUIRES="\
"

################################
## Patch files
################################
# Patch filenames are in a default style of 'git format-patch'
PATCH_URI=$(\
  find -maxdepth 1 -type f -name '[0-9][0-9][0-9][0-9]-*.patch' \
  | sort \
)
# Additional patches, if any
PATCH_URI+="
"

################################
## Contents of our packages
################################
# main package
THIS_PN="${NAME}-tools"
THIS_VN=${THIS_PN//[-+\.]/_}
PKG_NAMES+=" ${THIS_PN}"

printf -v "${THIS_VN}_CONTENTS" "%s" "\
  --exclude=*.dll\
  usr/bin/\
  usr/share/doc/\
"
printf -v "${THIS_VN}_REQUIRES" "%s" "\
"

################################
# Runtime libraries
THIS_PN="${NAME}${ABI}"
THIS_VN=${THIS_PN//[-+\.]/_}
PKG_NAMES+=" ${THIS_PN}"

printf -v "${THIS_VN}_CATEGORY" "%s" "Libs ${CATEGORY}"
printf -v "${THIS_VN}_SUMMARY"  "%s" "${SUMMARY% *} (runtime)"
printf -v "${THIS_VN}_CONTENTS" "%s" "\
  usr/bin/*.dll\
"
printf -v "${THIS_VN}_REQUIRES" "%s" "\
"

################################
# Devel
THIS_PN="${NAME}-devel"
THIS_VN=${THIS_PN//[-+\.]/_}
PKG_NAMES+=" ${THIS_PN}"

printf -v "${THIS_VN}_CATEGORY" "%s" "Devel Libs ${CATEGORY}"
printf -v "${THIS_VN}_SUMMARY"  "%s" "${SUMMARY% *} (devel)"
printf -v "${THIS_VN}_CONTENTS" "%s" "\
  usr/include/ \
  usr/lib/lib* \
"
printf -v "${THIS_VN}_REQUIRES" "%s" "\
"

################################
src_compile() {
        lndirs
        cd ${B}

        PREFIX=/usr \
        USE_SHARED_LIB=1 \
        cygmake
}

################################
src_install() {
        cd ${B}

        PREFIX=/usr \
        USE_SHARED_LIB=1 \
        cyginstall
}

################################
src_test() {
        cd ${B}

        PREFIX=/usr \
        USE_SHARED_LIB=1 \
        cygtest
}

################################
